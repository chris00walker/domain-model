import { Order } from '../domain/aggregates/Order';
import { OrderStatus } from '../domain/value-objects/OrderStatus';
import { OrderItem } from '../domain/value-objects/OrderItem';
import { CustomerId } from '../../customers/domain/value-objects/CustomerId';
import { ProductId } from '../../catalog/domain/value-objects/ProductId';
import { Money } from '../../shared/domain/value-objects/Money';
import { TestClock } from '../../shared/domain/Clock';
import { UniqueEntityID } from '../../shared/domain/base/UniqueEntityID';
import { OrderCreated } from '../domain/events/OrderCreated';
import { success } from '../../shared/core/Result';

describe('Order Aggregate with Clock', () => {
  const customerIdResult = CustomerId.create('customer-123');
  expect(customerIdResult.isSuccess()).toBeTruthy();
  const customerId = customerIdResult.isSuccess() ? customerIdResult.value : null as unknown as CustomerId;
  
  const productId1Result = ProductId.create('prod-123');
  expect(productId1Result.isSuccess()).toBeTruthy();
  const productId1 = productId1Result.isSuccess() ? productId1Result.value : null as unknown as ProductId;
  
  const productId2Result = ProductId.create('prod-456');
  expect(productId2Result.isSuccess()).toBeTruthy();
  const productId2 = productId2Result.isSuccess() ? productId2Result.value : null as unknown as ProductId;
  
  const initialDate = new Date('2025-05-20T10:00:00Z');
  
  // Create a proper OrderItem mock that implements all required interface properties
  const mockOrderItem = (productId: ProductId, quantity: number = 1): OrderItem => {
    const priceResult = Money.create(25.99, 'BBD');
    expect(priceResult.isSuccess()).toBeTruthy();
    const price = priceResult.isSuccess() ? priceResult.value : null as unknown as Money;
    
    // Create a complete OrderItem with all required properties
    return new OrderItem({
      productId,
      name: `Product ${productId.value}`,
      price,
      quantity,
      sku: `SKU-${productId.value.substring(0, 5)}`,
      imageUrl: `https://example.com/images/${productId.value}.jpg`
    });
  };

  const createOrderProps = () => ({
    customerId,
    items: [
      mockOrderItem(productId1, 2),
      mockOrderItem(productId2, 1)
    ],
    status: OrderStatus.Created,
    shippingAddress: '123 Test Street, Bridgetown, Barbados',
    billingAddress: '123 Test Street, Bridgetown, Barbados',
    createdAt: new Date(),
    updatedAt: new Date()
  });

  it('should set createdAt and updatedAt using the provided clock on creation', () => {
    // Arrange
    const testClock = new TestClock(initialDate);
    const orderProps = createOrderProps();
    
    // Act
    const orderResult = Order.create(orderProps, undefined, testClock);
    
    // Assert
    expect(orderResult.isSuccess()).toBeTruthy();
    if (!orderResult.isSuccess()) return;
    const order = orderResult.value;
    
    expect(order.createdAt.getTime()).toBe(initialDate.getTime());
    expect(order.updatedAt.getTime()).toBe(initialDate.getTime());
  });
  
  it('should emit OrderCreated event on creation', () => {
    // Arrange
    const testClock = new TestClock(initialDate);
    const orderProps = createOrderProps();
    
    // Act
    const orderResult = Order.create(orderProps, undefined, testClock);
    expect(orderResult.isSuccess()).toBeTruthy();
    if (!orderResult.isSuccess()) return;
    const order = orderResult.value;
    
    // Assert
    const events = order.domainEvents;
    expect(events.length).toBe(1);
    expect(events[0]).toBeInstanceOf(OrderCreated);
    const createdEvent = events[0] as OrderCreated;
    
    // Verify the event is associated with this order
    expect(createdEvent.aggregateId.toString() === order.getId().toString()).toBeTruthy();
  });
  
  it('should update updatedAt timestamp when adding an item', () => {
    // Arrange
    const testClock = new TestClock(initialDate);
    const orderProps = createOrderProps();
    const orderResult = Order.create(orderProps, undefined, testClock);
    expect(orderResult.isSuccess()).toBeTruthy();
    if (!orderResult.isSuccess()) return;
    const order = orderResult.value;
    
    // Clear initial events
    order.clearEvents();
    
    // Advance clock
    const updateTime = new Date('2025-05-20T12:30:00Z');
    testClock.setCurrentTime(updateTime);
    
    // New item to add
    const newItem = mockOrderItem(productId2, 3);
    
    // Act
    const result = order.addItem(newItem, testClock);
    
    // Assert
    expect(result.isSuccess()).toBeTruthy();
    expect(order.updatedAt.getTime()).toBe(updateTime.getTime());
  });
  
  it('should update updatedAt timestamp when removing an item', () => {
    // Arrange
    const testClock = new TestClock(initialDate);
    const orderProps = createOrderProps();
    const orderResult = Order.create(orderProps, undefined, testClock);
    expect(orderResult.isSuccess()).toBeTruthy();
    if (!orderResult.isSuccess()) return;
    const order = orderResult.value;
    
    // Clear initial events
    order.clearEvents();
    
    // Advance clock
    const updateTime = new Date('2025-05-20T14:45:00Z');
    testClock.setCurrentTime(updateTime);
    
    // Act - Remove the first item (assumes there's at least one item)
    const firstItemProductId = order.items[0].productId;
    const result = order.removeItem(firstItemProductId, testClock);
    
    // Assert
    expect(result.isSuccess()).toBeTruthy();
    expect(order.updatedAt.getTime()).toBe(updateTime.getTime());
  });
  
  it('should update updatedAt timestamp when confirming payment', () => {
    // Arrange
    const testClock = new TestClock(initialDate);
    const orderProps = createOrderProps();
    const orderResult = Order.create(orderProps, undefined, testClock);
    expect(orderResult.isSuccess()).toBeTruthy();
    if (!orderResult.isSuccess()) return;
    const order = orderResult.value;
    
    // Advance clock
    const updateTime = new Date('2025-05-21T09:15:00Z');
    testClock.setCurrentTime(updateTime);
    
    // Act
    const result = order.confirmPayment(testClock);
    
    // Assert
    expect(result.isSuccess()).toBeTruthy();
    expect(order.updatedAt.getTime()).toBe(updateTime.getTime());
    expect(order.status).toBe(OrderStatus.Paid);
  });
  
  it('should update updatedAt timestamp when fulfilling an order', () => {
    // Arrange
    const testClock = new TestClock(initialDate);
    const orderProps = createOrderProps();
    const orderResult = Order.create(orderProps, undefined, testClock);
    expect(orderResult.isSuccess()).toBeTruthy();
    if (!orderResult.isSuccess()) return;
    const order = orderResult.value;
    
    // First confirm payment (required before fulfillment)
    order.confirmPayment(testClock);
    
    // Advance clock
    const updateTime = new Date('2025-05-22T14:20:00Z');
    testClock.setCurrentTime(updateTime);
    
    // Act
    const result = order.fulfill(testClock);
    
    // Assert
    expect(result.isSuccess()).toBeTruthy();
    expect(order.updatedAt.getTime()).toBe(updateTime.getTime());
    expect(order.status).toBe(OrderStatus.Fulfilled);
  });
  
  it('should update updatedAt timestamp when cancelling an order', () => {
    // Arrange
    const testClock = new TestClock(initialDate);
    const orderProps = createOrderProps();
    const orderResult = Order.create(orderProps, undefined, testClock);
    expect(orderResult.isSuccess()).toBeTruthy();
    if (!orderResult.isSuccess()) return;
    const order = orderResult.value;
    
    // Advance clock
    const updateTime = new Date('2025-05-23T10:00:00Z');
    testClock.setCurrentTime(updateTime);
    
    // Act
    const result = order.cancel('Customer requested cancellation', testClock);
    
    // Assert
    expect(result.isSuccess()).toBeTruthy();
    expect(order.updatedAt.getTime()).toBe(updateTime.getTime());
    expect(order.status).toBe(OrderStatus.Cancelled);
  });
});
